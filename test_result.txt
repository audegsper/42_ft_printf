
-e ######### 42TESTERS-PRINTF ##########
#####42TESTS-PRINTF#####
----------Test 503 : ----------
"%%, 	, \, ", ', +" // 1st '*' = 12, 2nd '*' = 18

1c1
< 37, 	, \, ", ', + --- Return : 17
---
> %, 	, \, ", ', + --- Return : 16

----------Test 504 : ----------
"%%%dbada%s%%**%s**-d%%0*d%-12s0*@" // 1st '*' = 12, 2nd '*' = 18

1c1
< 374200badabada37**%%**-d370*d-12         0*@ --- Return : 44
---
> %4200badabada%**%%**-d%0*d-12         0*@ --- Return : 41

-e #########PFT##########
Test   6 (pct_basic) : FAILED.$
    First line of code: {return test("%%");}$
      expected output : "%"$
      your output     : "37"$
      expected (nonprintable as hex) : "%"$
      actual   (nonprintable as hex) : "37"$
$
Test   7 (pct_5w) : FAILED.$
    First line of code: {return test("%5%");}$
      expected output : "    %"$
      your output     : "   37"$
      expected (nonprintable as hex) : "    %"$
      actual   (nonprintable as hex) : "   37"$
$
Test   8 (pct_5wlj) : FAILED.$
    First line of code: {return test("%-5%");}$
      expected output : "%    "$
      your output     : "37   "$
      expected (nonprintable as hex) : "%    "$
      actual   (nonprintable as hex) : "37   "$
$
Test   9 (pct_5wzp) : FAILED.$
    First line of code: {return test("%05%");}$
      expected output : "0000%"$
      your output     : "00037"$
      expected (nonprintable as hex) : "0000%"$
      actual   (nonprintable as hex) : "00037"$
$
Test  10 (pct_5wljzp) : FAILED.$
    First line of code: {return test("%-05%");}$
      expected output : "%    "$
      your output     : "00037"$
      expected (nonprintable as hex) : "%    "$
      actual   (nonprintable as hex) : "00037"$
$
Test 591 (moul_d_10) : FAILED.$
    First line of code: {return test("%%d 0000042 == |%d|$
", 0000042);}$
      expected output : "%d 0000042 == |34|$
"$
      your output     : "37d 0000042 == |34|$
"$
      expected (nonprintable as hex) : "%d 0000042 == |34|\x0a"$
      actual   (nonprintable as hex) : "37d 0000042 == |34|\x0a"$
$
Test 592 (moul_d_11) : FAILED.$
    First line of code: {return test("%%d 	 == |%d|$
", '	');}$
      expected output : "%d 	 == |9|$
"$
      your output     : "37d 	 == |9|$
"$
      expected (nonprintable as hex) : "%d \x09 == |9|\x0a"$
      actual   (nonprintable as hex) : "37d \x09 == |9|\x0a"$
$
Test 593 (moul_d_12) : FAILED.$
    First line of code: {return test("%%d Lydie == |%d|$
", 'L'+'y'+'d'+'i'+'e');}$
      expected output : "%d Lydie == |503|$
"$
      your output     : "37d Lydie == |503|$
"$
      expected (nonprintable as hex) : "%d Lydie == |503|\x0a"$
      actual   (nonprintable as hex) : "37d Lydie == |503|\x0a"$
$
Test 594 (moul_mix_1) : FAILED.$
    First line of code: {int r00 = 0; return test("Lalalala, %d%% des gens qui parlent à Ly adorent %s. Ou Presque. %p", 100, "Ly", &r00);}$
      expected output : "Lalalala, 100% des gens qui parlent à Ly adorent Ly. Ou Presque. 0x7ffeef19b61c"$
      your output     : "Lalalala, 10037 des gens qui parlent à Ly adorent Ly. Ou Presque. 0x7ffeef19b61c"$
      expected (nonprintable as hex) : "Lalalala, 100% des gens qui parlent \xc3\xa0 Ly adorent Ly. Ou Presque. 0x7ffeef19b61c"$
      actual   (nonprintable as hex) : "Lalalala, 10037 des gens qui parlent \xc3\xa0 Ly adorent Ly. Ou Presque. 0x7ffeef19b61c"$
$
Test 604 (moul_i_10) : FAILED.$
    First line of code: {return test("%%i 0000042 == |%i|$
", 0000042);}$
      expected output : "%i 0000042 == |34|$
"$
      your output     : "37i 0000042 == |34|$
"$
      expected (nonprintable as hex) : "%i 0000042 == |34|\x0a"$
      actual   (nonprintable as hex) : "37i 0000042 == |34|\x0a"$
$
Test 605 (moul_i_11) : FAILED.$
    First line of code: {return test("%%i 	 == |%i|$
", '	');}$
      expected output : "%i 	 == |9|$
"$
      your output     : "37i 	 == |9|$
"$
      expected (nonprintable as hex) : "%i \x09 == |9|\x0a"$
      actual   (nonprintable as hex) : "37i \x09 == |9|\x0a"$
$
Test 606 (moul_i_12) : FAILED.$
    First line of code: {return test("%%i Lydie == |%i|$
", 'L'+'y'+'d'+'i'+'e');}$
      expected output : "%i Lydie == |503|$
"$
      your output     : "37i Lydie == |503|$
"$
      expected (nonprintable as hex) : "%i Lydie == |503|\x0a"$
      actual   (nonprintable as hex) : "37i Lydie == |503|\x0a"$
$
Test 616 (moul_u_10) : FAILED.$
    First line of code: {return test("%%u 0000042 == |%u|$
", 0000042);}$
      expected output : "%u 0000042 == |34|$
"$
      your output     : "37u 0000042 == |34|$
"$
      expected (nonprintable as hex) : "%u 0000042 == |34|\x0a"$
      actual   (nonprintable as hex) : "37u 0000042 == |34|\x0a"$
$
Test 617 (moul_u_11) : FAILED.$
    First line of code: {return test("%%u 	 == |%u|$
", '	');}$
      expected output : "%u 	 == |9|$
"$
      your output     : "37u 	 == |9|$
"$
      expected (nonprintable as hex) : "%u \x09 == |9|\x0a"$
      actual   (nonprintable as hex) : "37u \x09 == |9|\x0a"$
$
Test 618 (moul_u_12) : FAILED.$
    First line of code: {return test("%%u Lydie == |%u|$
", 'L'+'y'+'d'+'i'+'e');}$
      expected output : "%u Lydie == |503|$
"$
      your output     : "37u Lydie == |503|$
"$
      expected (nonprintable as hex) : "%u Lydie == |503|\x0a"$
      actual   (nonprintable as hex) : "37u Lydie == |503|\x0a"$
$
Test 628 (moul_x_10) : FAILED.$
    First line of code: {return test("%%x 0000042 == |%x|$
", 0000042);}$
      expected output : "%x 0000042 == |22|$
"$
      your output     : "37x 0000042 == |22|$
"$
      expected (nonprintable as hex) : "%x 0000042 == |22|\x0a"$
      actual   (nonprintable as hex) : "37x 0000042 == |22|\x0a"$
$
Test 629 (moul_x_11) : FAILED.$
    First line of code: {return test("%%x 	 == |%x|$
", '	');}$
      expected output : "%x 	 == |9|$
"$
      your output     : "37x 	 == |9|$
"$
      expected (nonprintable as hex) : "%x \x09 == |9|\x0a"$
      actual   (nonprintable as hex) : "37x \x09 == |9|\x0a"$
$
Test 630 (moul_x_12) : FAILED.$
    First line of code: {return test("%%x Lydie == |%x|$
", 'L'+'y'+'d'+'i'+'e');}$
      expected output : "%x Lydie == |1f7|$
"$
      your output     : "37x Lydie == |1f7|$
"$
      expected (nonprintable as hex) : "%x Lydie == |1f7|\x0a"$
      actual   (nonprintable as hex) : "37x Lydie == |1f7|\x0a"$
$
Test 631 (moul_prec_1) : FAILED.$
    First line of code: {return test("%%-5.3s LYDI == |%-5.3s|$
", "LYDI");}$
      expected output : "%-5.3s LYDI == |LYD  |$
"$
      your output     : "37-5.3s LYDI == |LYD  |$
"$
      expected (nonprintable as hex) : "%-5.3s LYDI == |LYD  |\x0a"$
      actual   (nonprintable as hex) : "37-5.3s LYDI == |LYD  |\x0a"$
$
Test 632 (moul_prec_3) : FAILED.$
    First line of code: {return test("%%04.5i 42 == |%04.5i|$
", 42);}$
      expected output : "%04.5i 42 == |00042|$
"$
      your output     : "3704.5i 42 == |00042|$
"$
      expected (nonprintable as hex) : "%04.5i 42 == |00042|\x0a"$
      actual   (nonprintable as hex) : "3704.5i 42 == |00042|\x0a"$
$
Test 633 (moul_prec_4) : FAILED.$
    First line of code: {return test("%%04.3i 42 == |%04.3i|$
", 42);}$
      expected output : "%04.3i 42 == | 042|$
"$
      your output     : "3704.3i 42 == | 042|$
"$
      expected (nonprintable as hex) : "%04.3i 42 == | 042|\x0a"$
      actual   (nonprintable as hex) : "3704.3i 42 == | 042|\x0a"$
$
Test 634 (moul_prec_5) : FAILED.$
    First line of code: {return test("%%04.2i 42 == |%04.2i|$
", 42);}$
      expected output : "%04.2i 42 == |  42|$
"$
      your output     : "3704.2i 42 == |  42|$
"$
      expected (nonprintable as hex) : "%04.2i 42 == |  42|\x0a"$
      actual   (nonprintable as hex) : "3704.2i 42 == |  42|\x0a"$
$
Test 635 (moul_zeropad_1) : FAILED.$
    First line of code: {return test("%%04i 42 == |%04i|$
", 42);}$
      expected output : "%04i 42 == |0042|$
"$
      your output     : "3704i 42 == |0042|$
"$
      expected (nonprintable as hex) : "%04i 42 == |0042|\x0a"$
      actual   (nonprintable as hex) : "3704i 42 == |0042|\x0a"$
$
Test 636 (moul_zeropad_2) : FAILED.$
    First line of code: {return test("%%05i 42 == |%05i|$
", 42);}$
      expected output : "%05i 42 == |00042|$
"$
      your output     : "3705i 42 == |00042|$
"$
      expected (nonprintable as hex) : "%05i 42 == |00042|\x0a"$
      actual   (nonprintable as hex) : "3705i 42 == |00042|\x0a"$
$
Test 637 (moul_zeropad_3) : FAILED.$
    First line of code: {return test("%%0i 42 == |%0i|$
", 42);}$
      expected output : "%0i 42 == |42|$
"$
      your output     : "370i 42 == |42|$
"$
      expected (nonprintable as hex) : "%0i 42 == |42|\x0a"$
      actual   (nonprintable as hex) : "370i 42 == |42|\x0a"$
$
Test 638 (moul_zeropad_4) : FAILED.$
    First line of code: {return test("%%0d 0000042 == |%0d|$
", 0000042);}$
      expected output : "%0d 0000042 == |34|$
"$
      your output     : "370d 0000042 == |34|$
"$
      expected (nonprintable as hex) : "%0d 0000042 == |34|\x0a"$
      actual   (nonprintable as hex) : "370d 0000042 == |34|\x0a"$
$
Test 639 (moul_leftjusty_1) : FAILED.$
    First line of code: {return test("%%-i 42 == %-i$
", 42);}$
      expected output : "%-i 42 == 42$
"$
      your output     : "37-i 42 == 42$
"$
      expected (nonprintable as hex) : "%-i 42 == 42\x0a"$
      actual   (nonprintable as hex) : "37-i 42 == 42\x0a"$
$
Test 640 (moul_leftjusty_2) : FAILED.$
    First line of code: {return test("%%-d 42 == %-d$
", INT_MIN);}$
      expected output : "%-d 42 == -2147483648$
"$
      your output     : "37-d 42 == -2147483648$
"$
      expected (nonprintable as hex) : "%-d 42 == -2147483648\x0a"$
      actual   (nonprintable as hex) : "37-d 42 == -2147483648\x0a"$
$
Test 641 (moul_leftjusty_3) : FAILED.$
    First line of code: {return test("%%-i -42 == %-i$
", -42);}$
      expected output : "%-i -42 == -42$
"$
      your output     : "37-i -42 == -42$
"$
      expected (nonprintable as hex) : "%-i -42 == -42\x0a"$
      actual   (nonprintable as hex) : "37-i -42 == -42\x0a"$
$
Test 642 (moul_leftjusty_4) : FAILED.$
    First line of code: {return test("%%-4d 42 == |%-4d|$
", 42);}$
      expected output : "%-4d 42 == |42  |$
"$
      your output     : "37-4d 42 == |42  |$
"$
      expected (nonprintable as hex) : "%-4d 42 == |42  |\x0a"$
      actual   (nonprintable as hex) : "37-4d 42 == |42  |\x0a"$
$
Test 643 (moul_leftjusty_5) : FAILED.$
    First line of code: {return test("%%-5d -42 == |%-5d|$
", -42);}$
      expected output : "%-5d -42 == |-42  |$
"$
      your output     : "37-5d -42 == |-42  |$
"$
      expected (nonprintable as hex) : "%-5d -42 == |-42  |\x0a"$
      actual   (nonprintable as hex) : "37-5d -42 == |-42  |\x0a"$
$
Test 645 (moul_leftjusty_7) : FAILED.$
    First line of code: {return test("%%-4i 42 == |%-4i|$
", 42);}$
      expected output : "%-4i 42 == |42  |$
"$
      your output     : "37-4i 42 == |42  |$
"$
      expected (nonprintable as hex) : "%-4i 42 == |42  |\x0a"$
      actual   (nonprintable as hex) : "37-4i 42 == |42  |\x0a"$
$
Test 646 (moul_star_1) : FAILED.$
    First line of code: {return test("%%-*.3s LYDI == |%-*.3s|$
", 5, "LYDI");}$
      expected output : "%-*.3s LYDI == |LYD  |$
"$
      your output     : "37-*.3s LYDI == |LYD  |$
"$
      expected (nonprintable as hex) : "%-*.3s LYDI == |LYD  |\x0a"$
      actual   (nonprintable as hex) : "37-*.3s LYDI == |LYD  |\x0a"$
$
Test 647 (moul_star_2) : FAILED.$
    First line of code: {return test("%% *.5i 42 == |% *.5i|$
", 4, 42);}$
      expected output : "% *.5i 42 == | 00042|$
"$
      your output     : "37 *.5i 42 == |0*.5i|$
"$
      expected (nonprintable as hex) : "% *.5i 42 == | 00042|\x0a"$
      actual   (nonprintable as hex) : "37 *.5i 42 == |0*.5i|\x0a"$
$
Test 648 (moul_star_3) : FAILED.$
    First line of code: {return test("%%*i 42 == |%*i|$
", 5, 42);}$
      expected output : "%*i 42 == |   42|$
"$
      your output     : "37*i 42 == |   42|$
"$
      expected (nonprintable as hex) : "%*i 42 == |   42|\x0a"$
      actual   (nonprintable as hex) : "37*i 42 == |   42|\x0a"$
$
Test 649 (moul_star_4) : FAILED.$
    First line of code: {return test("%%*i 42 == |%*i|$
", 3, 42);}$
      expected output : "%*i 42 == | 42|$
"$
      your output     : "37*i 42 == | 42|$
"$
      expected (nonprintable as hex) : "%*i 42 == | 42|\x0a"$
      actual   (nonprintable as hex) : "37*i 42 == | 42|\x0a"$
$
Test 650 (moul_star_5) : FAILED.$
    First line of code: {return test("%%*i 42 == |%*i|$
", 2, 42);}$
      expected output : "%*i 42 == |42|$
"$
      your output     : "37*i 42 == |42|$
"$
      expected (nonprintable as hex) : "%*i 42 == |42|\x0a"$
      actual   (nonprintable as hex) : "37*i 42 == |42|\x0a"$
$
Test 651 (mix_test_0) : FAILED.$
    First line of code: {return test($
      expected output : "  235    %    0x100b38310    eb    Hello, World!    42  "$
      your output     : "  235    37    0x100b38310    eb    Hello, World!    42  "$
      expected (nonprintable as hex) : "  235    %    0x100b38310    eb    Hello, World!    42  "$
      actual   (nonprintable as hex) : "  235    37    0x100b38310    eb    Hello, World!    42  "$
$
Test 653 (mix_test_2) : FAILED.$
    First line of code: {return test($
      expected output : "  %    42    EB    0x100b38310    G    Hello, World!  "$
      your output     : "  37    42    EB    0x100b38310    G    Hello, World!  "$
      expected (nonprintable as hex) : "  %    42    EB    0x100b38310    G    Hello, World!  "$
      actual   (nonprintable as hex) : "  37    42    EB    0x100b38310    G    Hello, World!  "$
$
Test 654 (mix_test_3) : FAILED.$
    First line of code: {return test($
      expected output : "  235    %    Hello, World!    G    eb    EB  "$
      your output     : "  235    37    Hello, World!    G    eb    EB  "$
      expected (nonprintable as hex) : "  235    %    Hello, World!    G    eb    EB  "$
      actual   (nonprintable as hex) : "  235    37    Hello, World!    G    eb    EB  "$
$
Test 655 (mix_test_4) : FAILED.$
    First line of code: {return test($
      expected output : "  42    G    eb    235    %    EB  "$
      your output     : "  42    G    eb    235    37    EB  "$
      expected (nonprintable as hex) : "  42    G    eb    235    %    EB  "$
      actual   (nonprintable as hex) : "  42    G    eb    235    37    EB  "$
$
Test 656 (mix_test_5) : FAILED.$
    First line of code: {return test($
      expected output : "  G    EB    42    %    Hello, World!    0x100b38310  "$
      your output     : "  G    EB    42    37    Hello, World!    0x100b38310  "$
      expected (nonprintable as hex) : "  G    EB    42    %    Hello, World!    0x100b38310  "$
      actual   (nonprintable as hex) : "  G    EB    42    37    Hello, World!    0x100b38310  "$
$
Test 658 (mix_test_7) : FAILED.$
    First line of code: {return test($
      expected output : "  42    Hello, World!    %    235    G    eb  "$
      your output     : "  42    Hello, World!    37    235    G    eb  "$
      expected (nonprintable as hex) : "  42    Hello, World!    %    235    G    eb  "$
      actual   (nonprintable as hex) : "  42    Hello, World!    37    235    G    eb  "$
$
Test 659 (mix_test_8) : FAILED.$
    First line of code: {return test($
      expected output : "  EB    0x100b38310    Hello, World!    %    235    eb  "$
      your output     : "  EB    0x100b38310    Hello, World!    37    235    eb  "$
      expected (nonprintable as hex) : "  EB    0x100b38310    Hello, World!    %    235    eb  "$
      actual   (nonprintable as hex) : "  EB    0x100b38310    Hello, World!    37    235    eb  "$
$
Test 660 (mix_test_9) : FAILED.$
    First line of code: {return test($
      expected output : "  G    %    235    42    eb    EB  "$
      your output     : "  G    37    235    42    eb    EB  "$
      expected (nonprintable as hex) : "  G    %    235    42    eb    EB  "$
      actual   (nonprintable as hex) : "  G    37    235    42    eb    EB  "$
$
Test 663 (mix_test_12) : FAILED.$
    First line of code: {return test($
      expected output : "  %    42    235    Hello, World!    G    EB  "$
      your output     : "  37    42    235    Hello, World!    G    EB  "$
      expected (nonprintable as hex) : "  %    42    235    Hello, World!    G    EB  "$
      actual   (nonprintable as hex) : "  37    42    235    Hello, World!    G    EB  "$
$
Test 667 (mix_test_16) : FAILED.$
    First line of code: {return test($
      expected output : "  G    %    42    EB    235    eb  "$
      your output     : "  G    37    42    EB    235    eb  "$
      expected (nonprintable as hex) : "  G    %    42    EB    235    eb  "$
      actual   (nonprintable as hex) : "  G    37    42    EB    235    eb  "$
$
Test 668 (mix_test_17) : FAILED.$
    First line of code: {return test($
      expected output : "  Hello, World!    %    eb    EB    G    235  "$
      your output     : "  Hello, World!    37    eb    EB    G    235  "$
      expected (nonprintable as hex) : "  Hello, World!    %    eb    EB    G    235  "$
      actual   (nonprintable as hex) : "  Hello, World!    37    eb    EB    G    235  "$
$
Test 669 (mix_test_18) : FAILED.$
    First line of code: {return test($
      expected output : "  eb    Hello, World!    EB    %    0x100b38310    42  "$
      your output     : "  eb    Hello, World!    EB    37    0x100b38310    42  "$
      expected (nonprintable as hex) : "  eb    Hello, World!    EB    %    0x100b38310    42  "$
      actual   (nonprintable as hex) : "  eb    Hello, World!    EB    37    0x100b38310    42  "$
$
Test 670 (mix_test_19) : FAILED.$
    First line of code: {return test($
      expected output : "  %    0x100b38310    42    G    eb    EB  "$
      your output     : "  37    0x100b38310    42    G    eb    EB  "$
      expected (nonprintable as hex) : "  %    0x100b38310    42    G    eb    EB  "$
      actual   (nonprintable as hex) : "  37    0x100b38310    42    G    eb    EB  "$
$
Test 671 (mix_test_20) : FAILED.$
    First line of code: {return test($
      expected output : "  G    Hello, World!    %    235    0x100b38310    eb  "$
      your output     : "  G    Hello, World!    37    235    0x100b38310    eb  "$
      expected (nonprintable as hex) : "  G    Hello, World!    %    235    0x100b38310    eb  "$
      actual   (nonprintable as hex) : "  G    Hello, World!    37    235    0x100b38310    eb  "$
$
Test 675 (mix_test_24) : FAILED.$
    First line of code: {return test($
      expected output : "  EB    %    42    Hello, World!    0x100b38310    eb  "$
      your output     : "  EB    37    42    Hello, World!    0x100b38310    eb  "$
      expected (nonprintable as hex) : "  EB    %    42    Hello, World!    0x100b38310    eb  "$
      actual   (nonprintable as hex) : "  EB    37    42    Hello, World!    0x100b38310    eb  "$
$
Test 678 (mix_test_27) : FAILED.$
    First line of code: {return test($
      expected output : "  42    235    G    %    EB    0x100b38310  "$
      your output     : "  42    235    G    37    EB    0x100b38310  "$
      expected (nonprintable as hex) : "  42    235    G    %    EB    0x100b38310  "$
      actual   (nonprintable as hex) : "  42    235    G    37    EB    0x100b38310  "$
$
Test 680 (mix_test_29) : FAILED.$
    First line of code: {return test($
      expected output : "  0x100b38310    %    eb    EB    42    G  "$
      your output     : "  0x100b38310    37    eb    EB    42    G  "$
      expected (nonprintable as hex) : "  0x100b38310    %    eb    EB    42    G  "$
      actual   (nonprintable as hex) : "  0x100b38310    37    eb    EB    42    G  "$
$
Test 681 (mix_test_30) : FAILED.$
    First line of code: {return test($
      expected output : "  EB    42    Hello, World!    %    235    0x100b38310  "$
      your output     : "  EB    42    Hello, World!    37    235    0x100b38310  "$
      expected (nonprintable as hex) : "  EB    42    Hello, World!    %    235    0x100b38310  "$
      actual   (nonprintable as hex) : "  EB    42    Hello, World!    37    235    0x100b38310  "$
$
Test 682 (mix_test_31) : FAILED.$
    First line of code: {return test($
      expected output : "  %    235    0x100b38310    42    EB    G  "$
      your output     : "  37    235    0x100b38310    42    EB    G  "$
      expected (nonprintable as hex) : "  %    235    0x100b38310    42    EB    G  "$
      actual   (nonprintable as hex) : "  37    235    0x100b38310    42    EB    G  "$
$
Test 684 (mix_test_33) : FAILED.$
    First line of code: {return test($
      expected output : "  G    %    Hello, World!    EB    eb    0x100b38310  "$
      your output     : "  G    37    Hello, World!    EB    eb    0x100b38310  "$
      expected (nonprintable as hex) : "  G    %    Hello, World!    EB    eb    0x100b38310  "$
      actual   (nonprintable as hex) : "  G    37    Hello, World!    EB    eb    0x100b38310  "$
$
Test 687 (mix_test_36) : FAILED.$
    First line of code: {return test($
      expected output : "  EB    Hello, World!    eb    0x100b38310    %    42  "$
      your output     : "  EB    Hello, World!    eb    0x100b38310    37    42  "$
      expected (nonprintable as hex) : "  EB    Hello, World!    eb    0x100b38310    %    42  "$
      actual   (nonprintable as hex) : "  EB    Hello, World!    eb    0x100b38310    37    42  "$
$
Test 688 (mix_test_37) : FAILED.$
    First line of code: {return test($
      expected output : "  eb    Hello, World!    %    0x100b38310    42    G  "$
      your output     : "  eb    Hello, World!    37    0x100b38310    42    G  "$
      expected (nonprintable as hex) : "  eb    Hello, World!    %    0x100b38310    42    G  "$
      actual   (nonprintable as hex) : "  eb    Hello, World!    37    0x100b38310    42    G  "$
$
Test 689 (mix_test_38) : FAILED.$
    First line of code: {return test($
      expected output : "  Hello, World!    235    eb    %    42    G  "$
      your output     : "  Hello, World!    235    eb    37    42    G  "$
      expected (nonprintable as hex) : "  Hello, World!    235    eb    %    42    G  "$
      actual   (nonprintable as hex) : "  Hello, World!    235    eb    37    42    G  "$
$
Test 690 (mix_test_39) : FAILED.$
    First line of code: {return test($
      expected output : "  0x100b38310    42    eb    %    235    EB  "$
      your output     : "  0x100b38310    42    eb    37    235    EB  "$
      expected (nonprintable as hex) : "  0x100b38310    42    eb    %    235    EB  "$
      actual   (nonprintable as hex) : "  0x100b38310    42    eb    37    235    EB  "$
$
Test 691 (mix_test_40) : FAILED.$
    First line of code: {return test($
      expected output : "  %    G    EB    0x100b38310    235    eb  "$
      your output     : "  37    G    EB    0x100b38310    235    eb  "$
      expected (nonprintable as hex) : "  %    G    EB    0x100b38310    235    eb  "$
      actual   (nonprintable as hex) : "  37    G    EB    0x100b38310    235    eb  "$
$
Test 692 (mix_test_41) : FAILED.$
    First line of code: {return test($
      expected output : "  235    G    %    0x100b38310    42    Hello, World!  "$
      your output     : "  235    G    37    0x100b38310    42    Hello, World!  "$
      expected (nonprintable as hex) : "  235    G    %    0x100b38310    42    Hello, World!  "$
      actual   (nonprintable as hex) : "  235    G    37    0x100b38310    42    Hello, World!  "$
$
Test 693 (mix_test_42) : FAILED.$
    First line of code: {return test($
      expected output : "  %    42    Hello, World!    235    G    EB  "$
      your output     : "  37    42    Hello, World!    235    G    EB  "$
      expected (nonprintable as hex) : "  %    42    Hello, World!    235    G    EB  "$
      actual   (nonprintable as hex) : "  37    42    Hello, World!    235    G    EB  "$
$
Test 694 (mix_test_43) : FAILED.$
    First line of code: {return test($
      expected output : "  %    42    235    Hello, World!    EB    0x100b38310  "$
      your output     : "  37    42    235    Hello, World!    EB    0x100b38310  "$
      expected (nonprintable as hex) : "  %    42    235    Hello, World!    EB    0x100b38310  "$
      actual   (nonprintable as hex) : "  37    42    235    Hello, World!    EB    0x100b38310  "$
$
Test 695 (mix_test_44) : FAILED.$
    First line of code: {return test($
      expected output : "  Hello, World!    G    EB    %    42    0x100b38310  "$
      your output     : "  Hello, World!    G    EB    37    42    0x100b38310  "$
      expected (nonprintable as hex) : "  Hello, World!    G    EB    %    42    0x100b38310  "$
      actual   (nonprintable as hex) : "  Hello, World!    G    EB    37    42    0x100b38310  "$
$
Test 696 (mix_test_45) : FAILED.$
    First line of code: {return test($
      expected output : "  eb    EB    235    42    %    Hello, World!  "$
      your output     : "  eb    EB    235    42    37    Hello, World!  "$
      expected (nonprintable as hex) : "  eb    EB    235    42    %    Hello, World!  "$
      actual   (nonprintable as hex) : "  eb    EB    235    42    37    Hello, World!  "$
$
Test 699 (mix_test_48) : FAILED.$
    First line of code: {return test($
      expected output : "  G    42    %    EB    0x100b38310    235  "$
      your output     : "  G    42    37    EB    0x100b38310    235  "$
      expected (nonprintable as hex) : "  G    42    %    EB    0x100b38310    235  "$
      actual   (nonprintable as hex) : "  G    42    37    EB    0x100b38310    235  "$
$
Test 700 (mix_test_49) : FAILED.$
    First line of code: {return test($
      expected output : "  Hello, World!    235    42    EB    %    G  "$
      your output     : "  Hello, World!    235    42    EB    37    G  "$
      expected (nonprintable as hex) : "  Hello, World!    235    42    EB    %    G  "$
      actual   (nonprintable as hex) : "  Hello, World!    235    42    EB    37    G  "$
$
Test 701 (mix_test_50) : FAILED.$
    First line of code: {return test($
      expected output : "  %    0x100b38310    EB    42    Hello, World!    eb  "$
      your output     : "  37    0x100b38310    EB    42    Hello, World!    eb  "$
      expected (nonprintable as hex) : "  %    0x100b38310    EB    42    Hello, World!    eb  "$
      actual   (nonprintable as hex) : "  37    0x100b38310    EB    42    Hello, World!    eb  "$
$
Test 703 (mix_test_52) : FAILED.$
    First line of code: {return test($
      expected output : "  EB    G    %    42    eb    Hello, World!  "$
      your output     : "  EB    G    37    42    eb    Hello, World!  "$
      expected (nonprintable as hex) : "  EB    G    %    42    eb    Hello, World!  "$
      actual   (nonprintable as hex) : "  EB    G    37    42    eb    Hello, World!  "$
$
Test 706 (mix_test_55) : FAILED.$
    First line of code: {return test($
      expected output : "  eb    0x100b38310    Hello, World!    235    %    G  "$
      your output     : "  eb    0x100b38310    Hello, World!    235    37    G  "$
      expected (nonprintable as hex) : "  eb    0x100b38310    Hello, World!    235    %    G  "$
      actual   (nonprintable as hex) : "  eb    0x100b38310    Hello, World!    235    37    G  "$
$
Test 707 (mix_test_56) : FAILED.$
    First line of code: {return test($
      expected output : "  %    42    EB    0x100b38310    235    Hello, World!  "$
      your output     : "  37    42    EB    0x100b38310    235    Hello, World!  "$
      expected (nonprintable as hex) : "  %    42    EB    0x100b38310    235    Hello, World!  "$
      actual   (nonprintable as hex) : "  37    42    EB    0x100b38310    235    Hello, World!  "$
$
Test 708 (mix_test_57) : FAILED.$
    First line of code: {return test($
      expected output : "  %    235    G    Hello, World!    42    eb  "$
      your output     : "  37    235    G    Hello, World!    42    eb  "$
      expected (nonprintable as hex) : "  %    235    G    Hello, World!    42    eb  "$
      actual   (nonprintable as hex) : "  37    235    G    Hello, World!    42    eb  "$
$
Test 711 (mix_test_60) : FAILED.$
    First line of code: {return test($
      expected output : "  235    %    eb    42    EB    G  "$
      your output     : "  235    37    eb    42    EB    G  "$
      expected (nonprintable as hex) : "  235    %    eb    42    EB    G  "$
      actual   (nonprintable as hex) : "  235    37    eb    42    EB    G  "$
$
Test 713 (mix_test_62) : FAILED.$
    First line of code: {return test($
      expected output : "  %    G    42    0x100b38310    Hello, World!    EB  "$
      your output     : "  37    G    42    0x100b38310    Hello, World!    EB  "$
      expected (nonprintable as hex) : "  %    G    42    0x100b38310    Hello, World!    EB  "$
      actual   (nonprintable as hex) : "  37    G    42    0x100b38310    Hello, World!    EB  "$
$
Test 714 (mix_test_63) : FAILED.$
    First line of code: {return test($
      expected output : "  Hello, World!    eb    %    EB    42    G  "$
      your output     : "  Hello, World!    eb    37    EB    42    G  "$
      expected (nonprintable as hex) : "  Hello, World!    eb    %    EB    42    G  "$
      actual   (nonprintable as hex) : "  Hello, World!    eb    37    EB    42    G  "$
$
Test 715 (mix_test_64) : FAILED.$
    First line of code: {return test($
      expected output : "  eb    EB    235    G    %    42  "$
      your output     : "  eb    EB    235    G    37    42  "$
      expected (nonprintable as hex) : "  eb    EB    235    G    %    42  "$
      actual   (nonprintable as hex) : "  eb    EB    235    G    37    42  "$
$
Test 716 (mix_test_65) : FAILED.$
    First line of code: {return test($
      expected output : "  G    %    42    0x100b38310    235    EB  "$
      your output     : "  G    37    42    0x100b38310    235    EB  "$
      expected (nonprintable as hex) : "  G    %    42    0x100b38310    235    EB  "$
      actual   (nonprintable as hex) : "  G    37    42    0x100b38310    235    EB  "$
$
Test 717 (mix_test_66) : FAILED.$
    First line of code: {return test($
      expected output : "  42    G    %    235    EB    0x100b38310  "$
      your output     : "  42    G    37    235    EB    0x100b38310  "$
      expected (nonprintable as hex) : "  42    G    %    235    EB    0x100b38310  "$
      actual   (nonprintable as hex) : "  42    G    37    235    EB    0x100b38310  "$
$
Test 720 (mix_test_69) : FAILED.$
    First line of code: {return test($
      expected output : "  %    Hello, World!    0x100b38310    42    EB    G  "$
      your output     : "  37    Hello, World!    0x100b38310    42    EB    G  "$
      expected (nonprintable as hex) : "  %    Hello, World!    0x100b38310    42    EB    G  "$
      actual   (nonprintable as hex) : "  37    Hello, World!    0x100b38310    42    EB    G  "$
$
Test 721 (mix_test_70) : FAILED.$
    First line of code: {return test($
      expected output : "  eb    EB    42    %    Hello, World!    235  "$
      your output     : "  eb    EB    42    37    Hello, World!    235  "$
      expected (nonprintable as hex) : "  eb    EB    42    %    Hello, World!    235  "$
      actual   (nonprintable as hex) : "  eb    EB    42    37    Hello, World!    235  "$
$
Test 722 (mix_test_71) : FAILED.$
    First line of code: {return test($
      expected output : "  Hello, World!    42    EB    G    %    0x100b38310  "$
      your output     : "  Hello, World!    42    EB    G    37    0x100b38310  "$
      expected (nonprintable as hex) : "  Hello, World!    42    EB    G    %    0x100b38310  "$
      actual   (nonprintable as hex) : "  Hello, World!    42    EB    G    37    0x100b38310  "$
$
Test 724 (mix_test_73) : FAILED.$
    First line of code: {return test($
      expected output : "  %    EB    235    eb    0x100b38310    G  "$
      your output     : "  37    EB    235    eb    0x100b38310    G  "$
      expected (nonprintable as hex) : "  %    EB    235    eb    0x100b38310    G  "$
      actual   (nonprintable as hex) : "  37    EB    235    eb    0x100b38310    G  "$
$
Test 726 (mix_test_75) : FAILED.$
    First line of code: {return test($
      expected output : "  42    G    %    0x100b38310    235    eb  "$
      your output     : "  42    G    37    0x100b38310    235    eb  "$
      expected (nonprintable as hex) : "  42    G    %    0x100b38310    235    eb  "$
      actual   (nonprintable as hex) : "  42    G    37    0x100b38310    235    eb  "$
$
Test 727 (mix_test_76) : FAILED.$
    First line of code: {return test($
      expected output : "  EB    %    235    G    0x100b38310    Hello, World!  "$
      your output     : "  EB    37    235    G    0x100b38310    Hello, World!  "$
      expected (nonprintable as hex) : "  EB    %    235    G    0x100b38310    Hello, World!  "$
      actual   (nonprintable as hex) : "  EB    37    235    G    0x100b38310    Hello, World!  "$
$
Test 729 (mix_test_78) : FAILED.$
    First line of code: {return test($
      expected output : "  0x100b38310    %    G    EB    235    42  "$
      your output     : "  0x100b38310    37    G    EB    235    42  "$
      expected (nonprintable as hex) : "  0x100b38310    %    G    EB    235    42  "$
      actual   (nonprintable as hex) : "  0x100b38310    37    G    EB    235    42  "$
$
Test 730 (mix_test_79) : FAILED.$
    First line of code: {return test($
      expected output : "  Hello, World!    G    42    %    0x100b38310    EB  "$
      your output     : "  Hello, World!    G    42    37    0x100b38310    EB  "$
      expected (nonprintable as hex) : "  Hello, World!    G    42    %    0x100b38310    EB  "$
      actual   (nonprintable as hex) : "  Hello, World!    G    42    37    0x100b38310    EB  "$
$
Test 731 (mix_test_80) : FAILED.$
    First line of code: {return test($
      expected output : "  0x100b38310    %    G    235    Hello, World!    EB  "$
      your output     : "  0x100b38310    37    G    235    Hello, World!    EB  "$
      expected (nonprintable as hex) : "  0x100b38310    %    G    235    Hello, World!    EB  "$
      actual   (nonprintable as hex) : "  0x100b38310    37    G    235    Hello, World!    EB  "$
$
Test 732 (mix_test_81) : FAILED.$
    First line of code: {return test($
      expected output : "  eb    G    %    Hello, World!    EB    42  "$
      your output     : "  eb    G    37    Hello, World!    EB    42  "$
      expected (nonprintable as hex) : "  eb    G    %    Hello, World!    EB    42  "$
      actual   (nonprintable as hex) : "  eb    G    37    Hello, World!    EB    42  "$
$
Test 733 (mix_test_82) : FAILED.$
    First line of code: {return test($
      expected output : "  %    G    42    EB    Hello, World!    eb  "$
      your output     : "  37    G    42    EB    Hello, World!    eb  "$
      expected (nonprintable as hex) : "  %    G    42    EB    Hello, World!    eb  "$
      actual   (nonprintable as hex) : "  37    G    42    EB    Hello, World!    eb  "$
$
Test 734 (mix_test_83) : FAILED.$
    First line of code: {return test($
      expected output : "  42    EB    %    G    235    Hello, World!  "$
      your output     : "  42    EB    37    G    235    Hello, World!  "$
      expected (nonprintable as hex) : "  42    EB    %    G    235    Hello, World!  "$
      actual   (nonprintable as hex) : "  42    EB    37    G    235    Hello, World!  "$
$
Test 739 (mix_test_88) : FAILED.$
    First line of code: {return test($
      expected output : "  42    G    0x100b38310    %    EB    235  "$
      your output     : "  42    G    0x100b38310    37    EB    235  "$
      expected (nonprintable as hex) : "  42    G    0x100b38310    %    EB    235  "$
      actual   (nonprintable as hex) : "  42    G    0x100b38310    37    EB    235  "$
$
Test 742 (mix_test_91) : FAILED.$
    First line of code: {return test($
      expected output : "  235    0x100b38310    EB    G    %    eb  "$
      your output     : "  235    0x100b38310    EB    G    37    eb  "$
      expected (nonprintable as hex) : "  235    0x100b38310    EB    G    %    eb  "$
      actual   (nonprintable as hex) : "  235    0x100b38310    EB    G    37    eb  "$
$
Test 743 (mix_test_92) : FAILED.$
    First line of code: {return test($
      expected output : "  G    0x100b38310    EB    eb    %    Hello, World!  "$
      your output     : "  G    0x100b38310    EB    eb    37    Hello, World!  "$
      expected (nonprintable as hex) : "  G    0x100b38310    EB    eb    %    Hello, World!  "$
      actual   (nonprintable as hex) : "  G    0x100b38310    EB    eb    37    Hello, World!  "$
$
Test 745 (mix_test_94) : FAILED.$
    First line of code: {return test($
      expected output : "  EB    0x100b38310    G    %    235    42  "$
      your output     : "  EB    0x100b38310    G    37    235    42  "$
      expected (nonprintable as hex) : "  EB    0x100b38310    G    %    235    42  "$
      actual   (nonprintable as hex) : "  EB    0x100b38310    G    37    235    42  "$
$
Test 746 (mix_test_95) : FAILED.$
    First line of code: {return test($
      expected output : "  %    42    eb    0x100b38310    G    Hello, World!  "$
      your output     : "  37    42    eb    0x100b38310    G    Hello, World!  "$
      expected (nonprintable as hex) : "  %    42    eb    0x100b38310    G    Hello, World!  "$
      actual   (nonprintable as hex) : "  37    42    eb    0x100b38310    G    Hello, World!  "$
$
Test 749 (mix_test_98) : FAILED.$
    First line of code: {return test($
      expected output : "  42    Hello, World!    %    0x100b38310    EB    G  "$
      your output     : "  42    Hello, World!    37    0x100b38310    EB    G  "$
      expected (nonprintable as hex) : "  42    Hello, World!    %    0x100b38310    EB    G  "$
      actual   (nonprintable as hex) : "  42    Hello, World!    37    0x100b38310    EB    G  "$
$
Test 4192 (notintsubject_o_neg_prec_star_01) : FAILED.$
    First line of code: {return test("%.*o", -3, 12345);}$
      expected output : "30071"$
      your output     : "0"$
      expected (nonprintable as hex) : "30071"$
      actual   (nonprintable as hex) : "0"$
$
Test 4193 (notintsubject_o_neg_prec_star_02) : FAILED.$
    First line of code: {return test("%.*o", -1, 12345);}$
      expected output : "30071"$
      your output     : "0"$
      expected (nonprintable as hex) : "30071"$
      actual   (nonprintable as hex) : "0"$
$
-e #########PFT_2019##########
WARNING: The return values reported here may be bugged on some systems.$
          See https://github.com/gavinfielder/pft/issues/11$
          Run in non-fork mode (-X) to ensure accurate return value$
          reporting, set IGNORE_RETURN_VALUE=1 in options-config.ini,$
          or run test_pipes.sh to see if your system has this bug.$
          This bug does not affect the pass/fail result of a test, nor$
          the function output--only the reported return value.$
$
$
Test   6 (pct_basic) : FAILED.$
    First line of code: {return test("%%");}$
      expected return value : 1$
      your return value     : 2$
      expected output : "%"$
      your output     : "37"$
      expected (nonprintable as hex) : "%"$
      actual   (nonprintable as hex) : "37"$
$
Test   7 (pct_5w) : FAILED.$
    First line of code: {return test("%5%");}$
      expected return value : 5$
      your return value     : 5$
      expected output : "    %"$
      your output     : "   37"$
      expected (nonprintable as hex) : "    %"$
      actual   (nonprintable as hex) : "   37"$
$
Test   8 (pct_5wlj) : FAILED.$
    First line of code: {return test("%-5%");}$
      expected return value : 5$
      your return value     : 5$
      expected output : "%    "$
      your output     : "37   "$
      expected (nonprintable as hex) : "%    "$
      actual   (nonprintable as hex) : "37   "$
$
Test   9 (pct_5wzp) : FAILED.$
    First line of code: {return test("%05%");}$
      expected return value : 5$
      your return value     : 5$
      expected output : "0000%"$
      your output     : "00037"$
      expected (nonprintable as hex) : "0000%"$
      actual   (nonprintable as hex) : "00037"$
$
Test  10 (pct_5wljzp) : FAILED.$
    First line of code: {return test("%-05%");}$
      expected return value : 5$
      your return value     : 5$
      expected output : "%    "$
      your output     : "00037"$
      expected (nonprintable as hex) : "%    "$
      actual   (nonprintable as hex) : "00037"$
$
Test  11 (nocrash_nullspec_basic) : FAILED.$
    (nocrash test: automatically passes provided no unexpected failure)$
    First line of code: {return test("%");}$
    SEGFAULT$
$
Test  12 (nocrash_nullspec_5w) : FAILED.$
    (nocrash test: automatically passes provided no unexpected failure)$
    First line of code: {return test("%5");}$
    SEGFAULT$
$
Test  13 (nocrash_nullspec_5wzp) : FAILED.$
    (nocrash test: automatically passes provided no unexpected failure)$
    First line of code: {return test("%05");}$
    SEGFAULT$
$
Test  14 (nocrash_nullspec_5wzplj) : FAILED.$
    (nocrash test: automatically passes provided no unexpected failure)$
    First line of code: {return test("%-05");}$
    SEGFAULT$
$
Test  15 (nocrash_nullspec_5wlj) : FAILED.$
    (nocrash test: automatically passes provided no unexpected failure)$
    First line of code: {return test("%-5");}$
    SEGFAULT$
$
Test 130 (s_undefbehav_0_width_9) : FAILED.$
    First line of code: {return test("%09s", s_hidden);}$
      expected return value : 9$
      your return value     : 6$
      expected output : "000hi low"$
      your output     : "hi low"$
      expected (nonprintable as hex) : "000hi low"$
      actual   (nonprintable as hex) : "hi low"$
$
Test 132 (s_undefbehav_lj_0_width_9) : FAILED.$
    First line of code: {return test("%-09s", s_hidden);}$
      expected return value : 9$
      your return value     : 6$
      expected output : "hi low   "$
      your output     : "hi low"$
      expected (nonprintable as hex) : "hi low   "$
      actual   (nonprintable as hex) : "hi low"$
$
Test 638 (moul_d_10) : FAILED.$
    First line of code: {return test("%%d 0000042 == |%d|$
", 0000042);}$
      expected return value : 20$
      your return value     : 22$
      expected output : "%d 0000042 == |34|$
"$
      your output     : "37d 0000042 == |34|$
"$
      expected (nonprintable as hex) : "%d 0000042 == |34|\x0a"$
      actual   (nonprintable as hex) : "37d 0000042 == |34|\x0a"$
$
Test 639 (moul_d_11) : FAILED.$
    First line of code: {return test("%%d 	 == |%d|$
", '	');}$
      expected return value : 13$
      your return value     : 14$
      expected output : "%d 	 == |9|$
"$
      your output     : "37d 	 == |9|$
"$
      expected (nonprintable as hex) : "%d \x09 == |9|\x0a"$
      actual   (nonprintable as hex) : "37d \x09 == |9|\x0a"$
$
Test 640 (moul_d_12) : FAILED.$
    First line of code: {return test("%%d Lydie == |%d|$
", 'L'+'y'+'d'+'i'+'e');}$
      expected return value : 19$
      your return value     : 20$
      expected output : "%d Lydie == |503|$
"$
      your output     : "37d Lydie == |503|$
"$
      expected (nonprintable as hex) : "%d Lydie == |503|\x0a"$
      actual   (nonprintable as hex) : "37d Lydie == |503|\x0a"$
$
Test 641 (moul_mix_1) : FAILED.$
    First line of code: {int r00 = 0; return test("Lalalala, %d%% des gens qui parlent à Ly adorent %s. Ou Presque. %p", 100, "Ly", &r00);}$
      expected return value : 88$
      your return value     : 89$
      expected output : "Lalalala, 100% des gens qui parlent à Ly adorent Ly. Ou Presque. 0x7ffee0eb561c"$
      your output     : "Lalalala, 10037 des gens qui parlent à Ly adorent Ly. Ou Presque. 0x7ffee0eb561c"$
      expected (nonprintable as hex) : "Lalalala, 100% des gens qui parlent \xc3\xa0 Ly adorent Ly. Ou Presque. 0x7ffee0eb561c"$
      actual   (nonprintable as hex) : "Lalalala, 10037 des gens qui parlent \xc3\xa0 Ly adorent Ly. Ou Presque. 0x7ffee0eb561c"$
$
Test 680 (moul_i_10) : FAILED.$
    First line of code: {return test("%%i 0000042 == |%i|$
", 0000042);}$
      expected return value : 20$
      your return value     : 22$
      expected output : "%i 0000042 == |34|$
"$
      your output     : "37i 0000042 == |34|$
"$
      expected (nonprintable as hex) : "%i 0000042 == |34|\x0a"$
      actual   (nonprintable as hex) : "37i 0000042 == |34|\x0a"$
$
Test 681 (moul_i_11) : FAILED.$
    First line of code: {return test("%%i 	 == |%i|$
", '	');}$
      expected return value : 13$
      your return value     : 14$
      expected output : "%i 	 == |9|$
"$
      your output     : "37i 	 == |9|$
"$
      expected (nonprintable as hex) : "%i \x09 == |9|\x0a"$
      actual   (nonprintable as hex) : "37i \x09 == |9|\x0a"$
$
Test 682 (moul_i_12) : FAILED.$
    First line of code: {return test("%%i Lydie == |%i|$
", 'L'+'y'+'d'+'i'+'e');}$
      expected return value : 19$
      your return value     : 20$
      expected output : "%i Lydie == |503|$
"$
      your output     : "37i Lydie == |503|$
"$
      expected (nonprintable as hex) : "%i Lydie == |503|\x0a"$
      actual   (nonprintable as hex) : "37i Lydie == |503|\x0a"$
$
Test 692 (moul_u_10) : FAILED.$
    First line of code: {return test("%%u 0000042 == |%u|$
", 0000042);}$
      expected return value : 20$
      your return value     : 22$
      expected output : "%u 0000042 == |34|$
"$
      your output     : "37u 0000042 == |34|$
"$
      expected (nonprintable as hex) : "%u 0000042 == |34|\x0a"$
      actual   (nonprintable as hex) : "37u 0000042 == |34|\x0a"$
$
Test 693 (moul_u_11) : FAILED.$
    First line of code: {return test("%%u 	 == |%u|$
", '	');}$
      expected return value : 13$
      your return value     : 14$
      expected output : "%u 	 == |9|$
"$
      your output     : "37u 	 == |9|$
"$
      expected (nonprintable as hex) : "%u \x09 == |9|\x0a"$
      actual   (nonprintable as hex) : "37u \x09 == |9|\x0a"$
$
Test 694 (moul_u_12) : FAILED.$
    First line of code: {return test("%%u Lydie == |%u|$
", 'L'+'y'+'d'+'i'+'e');}$
      expected return value : 19$
      your return value     : 20$
      expected output : "%u Lydie == |503|$
"$
      your output     : "37u Lydie == |503|$
"$
      expected (nonprintable as hex) : "%u Lydie == |503|\x0a"$
      actual   (nonprintable as hex) : "37u Lydie == |503|\x0a"$
$
Test 704 (moul_x_10) : FAILED.$
    First line of code: {return test("%%x 0000042 == |%x|$
", 0000042);}$
      expected return value : 20$
      your return value     : 22$
      expected output : "%x 0000042 == |22|$
"$
      your output     : "37x 0000042 == |22|$
"$
      expected (nonprintable as hex) : "%x 0000042 == |22|\x0a"$
      actual   (nonprintable as hex) : "37x 0000042 == |22|\x0a"$
$
Test 705 (moul_x_11) : FAILED.$
    First line of code: {return test("%%x 	 == |%x|$
", '	');}$
      expected return value : 13$
      your return value     : 14$
      expected output : "%x 	 == |9|$
"$
      your output     : "37x 	 == |9|$
"$
      expected (nonprintable as hex) : "%x \x09 == |9|\x0a"$
      actual   (nonprintable as hex) : "37x \x09 == |9|\x0a"$
$
Test 706 (moul_x_12) : FAILED.$
    First line of code: {return test("%%x Lydie == |%x|$
", 'L'+'y'+'d'+'i'+'e');}$
      expected return value : 19$
      your return value     : 20$
      expected output : "%x Lydie == |1f7|$
"$
      your output     : "37x Lydie == |1f7|$
"$
      expected (nonprintable as hex) : "%x Lydie == |1f7|\x0a"$
      actual   (nonprintable as hex) : "37x Lydie == |1f7|\x0a"$
$
Test 707 (moul_prec_1) : FAILED.$
    First line of code: {return test("%%-5.3s LYDI == |%-5.3s|$
", "LYDI");}$
      expected return value : 25$
      your return value     : 26$
      expected output : "%-5.3s LYDI == |LYD  |$
"$
      your output     : "37-5.3s LYDI == |LYD  |$
"$
      expected (nonprintable as hex) : "%-5.3s LYDI == |LYD  |\x0a"$
      actual   (nonprintable as hex) : "37-5.3s LYDI == |LYD  |\x0a"$
$
Test 708 (moul_prec_3) : FAILED.$
    First line of code: {return test("%%04.5i 42 == |%04.5i|$
", 42);}$
      expected return value : 23$
      your return value     : 24$
      expected output : "%04.5i 42 == |00042|$
"$
      your output     : "3704.5i 42 == |00042|$
"$
      expected (nonprintable as hex) : "%04.5i 42 == |00042|\x0a"$
      actual   (nonprintable as hex) : "3704.5i 42 == |00042|\x0a"$
$
Test 709 (moul_prec_4) : FAILED.$
    First line of code: {return test("%%04.3i 42 == |%04.3i|$
", 42);}$
      expected return value : 22$
      your return value     : 23$
      expected output : "%04.3i 42 == | 042|$
"$
      your output     : "3704.3i 42 == | 042|$
"$
      expected (nonprintable as hex) : "%04.3i 42 == | 042|\x0a"$
      actual   (nonprintable as hex) : "3704.3i 42 == | 042|\x0a"$
$
Test 710 (moul_prec_5) : FAILED.$
    First line of code: {return test("%%04.2i 42 == |%04.2i|$
", 42);}$
      expected return value : 22$
      your return value     : 23$
      expected output : "%04.2i 42 == |  42|$
"$
      your output     : "3704.2i 42 == |  42|$
"$
      expected (nonprintable as hex) : "%04.2i 42 == |  42|\x0a"$
      actual   (nonprintable as hex) : "3704.2i 42 == |  42|\x0a"$
$
Test 711 (moul_zeropad_1) : FAILED.$
    First line of code: {return test("%%04i 42 == |%04i|$
", 42);}$
      expected return value : 19$
      your return value     : 20$
      expected output : "%04i 42 == |0042|$
"$
      your output     : "3704i 42 == |0042|$
"$
      expected (nonprintable as hex) : "%04i 42 == |0042|\x0a"$
      actual   (nonprintable as hex) : "3704i 42 == |0042|\x0a"$
$
Test 712 (moul_zeropad_2) : FAILED.$
    First line of code: {return test("%%05i 42 == |%05i|$
", 42);}$
      expected return value : 20$
      your return value     : 22$
      expected output : "%05i 42 == |00042|$
"$
      your output     : "3705i 42 == |00042|$
"$
      expected (nonprintable as hex) : "%05i 42 == |00042|\x0a"$
      actual   (nonprintable as hex) : "3705i 42 == |00042|\x0a"$
$
Test 713 (moul_zeropad_3) : FAILED.$
    First line of code: {return test("%%0i 42 == |%0i|$
", 42);}$
      expected return value : 16$
      your return value     : 17$
      expected output : "%0i 42 == |42|$
"$
      your output     : "370i 42 == |42|$
"$
      expected (nonprintable as hex) : "%0i 42 == |42|\x0a"$
      actual   (nonprintable as hex) : "370i 42 == |42|\x0a"$
$
Test 714 (moul_zeropad_4) : FAILED.$
    First line of code: {return test("%%0d 0000042 == |%0d|$
", 0000042);}$
      expected return value : 22$
      your return value     : 23$
      expected output : "%0d 0000042 == |34|$
"$
      your output     : "370d 0000042 == |34|$
"$
      expected (nonprintable as hex) : "%0d 0000042 == |34|\x0a"$
      actual   (nonprintable as hex) : "370d 0000042 == |34|\x0a"$
$
Test 715 (moul_leftjusty_1) : FAILED.$
    First line of code: {return test("%%-i 42 == %-i$
", 42);}$
      expected return value : 14$
      your return value     : 15$
      expected output : "%-i 42 == 42$
"$
      your output     : "37-i 42 == 42$
"$
      expected (nonprintable as hex) : "%-i 42 == 42\x0a"$
      actual   (nonprintable as hex) : "37-i 42 == 42\x0a"$
$
Test 716 (moul_leftjusty_2) : FAILED.$
    First line of code: {return test("%%-d 42 == %-d$
", INT_MIN);}$
      expected return value : 24$
      your return value     : 25$
      expected output : "%-d 42 == -2147483648$
"$
      your output     : "37-d 42 == -2147483648$
"$
      expected (nonprintable as hex) : "%-d 42 == -2147483648\x0a"$
      actual   (nonprintable as hex) : "37-d 42 == -2147483648\x0a"$
$
Test 717 (moul_leftjusty_3) : FAILED.$
    First line of code: {return test("%%-i -42 == %-i$
", -42);}$
      expected return value : 16$
      your return value     : 17$
      expected output : "%-i -42 == -42$
"$
      your output     : "37-i -42 == -42$
"$
      expected (nonprintable as hex) : "%-i -42 == -42\x0a"$
      actual   (nonprintable as hex) : "37-i -42 == -42\x0a"$
$
Test 718 (moul_leftjusty_4) : FAILED.$
    First line of code: {return test("%%-4d 42 == |%-4d|$
", 42);}$
      expected return value : 19$
      your return value     : 20$
      expected output : "%-4d 42 == |42  |$
"$
      your output     : "37-4d 42 == |42  |$
"$
      expected (nonprintable as hex) : "%-4d 42 == |42  |\x0a"$
      actual   (nonprintable as hex) : "37-4d 42 == |42  |\x0a"$
$
Test 719 (moul_leftjusty_5) : FAILED.$
    First line of code: {return test("%%-5d -42 == |%-5d|$
", -42);}$
      expected return value : 22$
      your return value     : 23$
      expected output : "%-5d -42 == |-42  |$
"$
      your output     : "37-5d -42 == |-42  |$
"$
      expected (nonprintable as hex) : "%-5d -42 == |-42  |\x0a"$
      actual   (nonprintable as hex) : "37-5d -42 == |-42  |\x0a"$
$
Test 721 (moul_leftjusty_7) : FAILED.$
    First line of code: {return test("%%-4i 42 == |%-4i|$
", 42);}$
      expected return value : 19$
      your return value     : 20$
      expected output : "%-4i 42 == |42  |$
"$
      your output     : "37-4i 42 == |42  |$
"$
      expected (nonprintable as hex) : "%-4i 42 == |42  |\x0a"$
      actual   (nonprintable as hex) : "37-4i 42 == |42  |\x0a"$
$
Test 722 (moul_notmandatory_star_1) : FAILED.$
    First line of code: {return test("%%-*.3s LYDI == |%-*.3s|$
", 5, "LYDI");}$
      expected return value : 25$
      your return value     : 26$
      expected output : "%-*.3s LYDI == |LYD  |$
"$
      your output     : "37-*.3s LYDI == |LYD  |$
"$
      expected (nonprintable as hex) : "%-*.3s LYDI == |LYD  |\x0a"$
      actual   (nonprintable as hex) : "37-*.3s LYDI == |LYD  |\x0a"$
$
Test 723 (moul_notmandatory_star_3) : FAILED.$
    First line of code: {return test("%%*i 42 == |%*i|$
", 5, 42);}$
      expected return value : 19$
      your return value     : 20$
      expected output : "%*i 42 == |   42|$
"$
      your output     : "37*i 42 == |   42|$
"$
      expected (nonprintable as hex) : "%*i 42 == |   42|\x0a"$
      actual   (nonprintable as hex) : "37*i 42 == |   42|\x0a"$
$
Test 724 (moul_notmandatory_star_4) : FAILED.$
    First line of code: {return test("%%*i 42 == |%*i|$
", 3, 42);}$
      expected return value : 17$
      your return value     : 18$
      expected output : "%*i 42 == | 42|$
"$
      your output     : "37*i 42 == | 42|$
"$
      expected (nonprintable as hex) : "%*i 42 == | 42|\x0a"$
      actual   (nonprintable as hex) : "37*i 42 == | 42|\x0a"$
$
Test 725 (moul_notmandatory_star_5) : FAILED.$
    First line of code: {return test("%%*i 42 == |%*i|$
", 2, 42);}$
      expected return value : 16$
      your return value     : 17$
      expected output : "%*i 42 == |42|$
"$
      your output     : "37*i 42 == |42|$
"$
      expected (nonprintable as hex) : "%*i 42 == |42|\x0a"$
      actual   (nonprintable as hex) : "37*i 42 == |42|\x0a"$
$
-e ######### printf_lover_v2 ##########
-e ######### printf-tester ##########
-e ######### ft_printf_test ##########
- [OUTPUT] ft_printf("%%")
   expected: "%"
   actual:   "37"

- [OUTPUT] ft_printf("%5%")
   expected: "    %"
   actual:   "   37"

- [OUTPUT] ft_printf("%-5%")
   expected: "%    "
   actual:   "37   "

- [OUTPUT] ft_printf("%05%")
   expected: "0000%"
   actual:   "00037"

- [OUTPUT] ft_printf("%-05%")
   expected: "%    "
   actual:   "00037"

- [OUTPUT] ft_printf("%%")
   expected: "%"
   actual:   "37"

- [OUTPUT] ft_printf("aa%%bb")
   expected: "aa%bb"
   actual:   "aa37bb"

- [OUTPUT] ft_printf("%%%%%%%%%%")
   expected: "%%%%%"
   actual:   "3737373737"

- [OUTPUT] ft_printf(".%%.%%.%%.%%.%%.%%.%%.%%.")
   expected: ".%.%.%.%.%.%.%.%."
   actual:   ".37.37.37.37.37.37.37.37."

- [OUTPUT] ft_printf("%s %d %p %% %x", "bonjour ", 42, &free, 42)
   expected: "bonjour  42 0x7fff6d0829b1 % 2a"
   actual:   "bonjour  42 0x7fff6d0829b1 37 2a"

- [OUTPUT] ft_printf("%%\n")
   expected: "%\n"
   actual:   "37\n"

- [OUTPUT] ft_printf("%010%")
   expected: "000000000%"
   actual:   "0000000037"

- [OUTPUT] ft_printf("percent 1 %012%")
   expected: "percent 1 00000000000%"
   actual:   "percent 1 000000000037"

- [OUTPUT] ft_printf("percent 2 %12%")
   expected: "percent 2            %"
   actual:   "percent 2           37"

- [OUTPUT] ft_printf("percent 3 %-12%")
   expected: "percent 3 %           "
   actual:   "percent 3 37          "

- [OUTPUT] ft_printf("percent 4 %0%")
   expected: "percent 4 %"
   actual:   "percent 4 37"

- [OUTPUT] ft_printf("%%")
   expected: "%"
   actual:   "37"

- [OUTPUT] ft_printf("%-192.131%")
   expected: "%                                                                                                                                                                                               "
   actual:   "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000037                                                             "

- [OUTPUT] ft_printf("%*p%-135.109d" ,-15,(void*)15603137398285451084lu,1482420587)
   expected: "0xd8897acb766abf4c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001482420587                          "
   actual:   "-0x27768534899540b40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001482420587                          "

- [OUTPUT] ft_printf("%-48p%-164c" ,(void*)9888845855039847185lu,114)
   expected: "0x893c3ce96c3e7b11                              r                                                                                                                                                                   "
   actual:   "-0x76c3c31693c184ef                             r                                                                                                                                                                   "

- [OUTPUT] ft_printf("%-70.193x%-140c%168c%026.51%%0125.119X" ,1102840003u,-50,-17,3721437512u)
   expected: "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041bc00c3                                                                                                                                                                                                                                                                                                                  0000000000000000000000000%      000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000DDD0A148\ce\ef"
   actual:   "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041bc00c3                                                                                                                                                                                                                                                                                                                  000000000000000000000000000000000000000000000000037      000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000DDD0A148\ce\ef"

- [OUTPUT] ft_printf("%104.60s%109c%-9p" ,"}&@/h\n\f<C",36,(void*)14251011342640672780lu)
   expected: "                                                                                               }&@/h<C                                                                                                            $0xc5c5c34fa028f00c\n\0c"
   actual:   "                                                                                               }&@/h<C                                                                                                            $-0x3a3a3cb05fd70ff4\n\0c"

- [OUTPUT] ft_printf("%131p%--.42u%65c%-68c%-7c" ,(void*)14631880201060661778lu,1668628755u,110,-16,-32)
   expected: "                                                                                                                 0xcb0ee185144aba12000000000000000000000000000000001668628755                                                                n                                                                         \f0\e0"
   actual:   "                                                                                                                -0x34f11e7aebb545ee000000000000000000000000000000001668628755                                                                n                                                                         \f0\e0"

- [OUTPUT] ft_printf("%10c%0036.99%" ,9)
   expected: "         00000000000000000000000000000000000%\t"
   actual:   "         000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000037\t"

- [OUTPUT] ft_printf("%-*.*i%-19.119%" ,158,176,-448314345)
   expected: "-00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000448314345%                  "
   actual:   "-0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044831434500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000037"

- [OUTPUT] ft_printf("%-75.38s%-148.135s%00156.106i%-*.105%" ,"q;&kDMa}NfJoOp\\luHJ",NULL,1930062644,105)
   expected: "q;&kDMa}NfJoOp\luHJ                                                        (null)                                                                                                                                                                                                0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001930062644%                                                                                                        "
   actual:   "q;&kDMa}NfJoOp\luHJ                                                        (null)                                                                                                                                                                                                0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001930062644000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000037"

- [OUTPUT] ft_printf("%--158p%---.15s%-108c" ,(void*)9474372414016659745lu,"O_r",24)
   expected: "0x837bbb835f392121                                                                                                                                            O_r                                                                                                           \18"
   actual:   "-0x7c84447ca0c6dedf                                                                                                                                           O_r                                                                                                           \18"

- [OUTPUT] ft_printf("%-50c%-85.157%%--58.188X" ,9,274691972u)
   expected: "                                                 %                                                                                    000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000105F7784\t"
   actual:   "                                                 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000037000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000105F7784\t"

- [OUTPUT] ft_printf("%64p%038.87d%23c%--182.49i%--76.110%" ,(void*)10278319775164267212lu,-1550079501,30,-862355787)
   expected: "                                              0x8ea3ed60ee89facc-000000000000000000000000000000000000000000000000000000000000000000000000000001550079501                      -0000000000000000000000000000000000000000862355787                                                                                                                                    %                                                                           \1e"
   actual:   "                                             -0x715c129f11760534-000000000000000000000000000000000000000000000000000000000000000000000000000001550079501                      -0000000000000000000000000000000000000000862355787                                                                                                                                    00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000037\1e"

- [OUTPUT] ft_printf("%-149.*%%-114.120i%0*.24%%--*.28d" ,-63,1318471055,-125,-68,-1205906582)
   expected: "%                                                                                                                                                    000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001318471055%                                                                                                                            -0000000000000000001205906582                                       "
   actual:   "37                                                                                                                                                   000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001318471055000000000000000000000037                                                                                                     -0000000000000000001205906582                                       "

- [OUTPUT] ft_printf("%-102p%-91p%00*.32%" ,(void*)17383623580121946936lu,(void*)6825043625903153404lu,-125)
   expected: "0xf13f098b3245db38                                                                                    0x5eb76d04628060fc                                                                         %                                                                                                                            "
   actual:   "-0xec0f674cdba24c8                                                                                    0x5eb76d04628060fc                                                                         00000000000000000000000000000037                                                                                             "

- [OUTPUT] ft_printf("%-132.186x%00129.46%%-191.181X%-75.123d%0033.123u" ,2222238685u,3146675666u,251185067,3453417465u)
   expected: "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008474abdd
   actual:   "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008474abdd

- [OUTPUT] ft_printf("%--198.101X%0145.12%%172c" ,935976394u,-118)
   expected: "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000037C9DDCA                                                                                                 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000%                                                                                                                                                                           \8a"
   actual:   "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000037C9DDCA                                                                                                                                                                                                                                      000000000037                                                                                                                                                                           \8a"

- [OUTPUT] ft_printf("%120p%--55.128i" ,(void*)9377650025287837451lu,816352753)
   expected: "                                                                                                      0x82241b035936e70b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000816352753"
   actual:   "                                                                                                     -0x7ddbe4fca6c918f500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000816352753"

- [OUTPUT] ft_printf("%--3.115X%-*.*%%58c%-117.63u%---78p" ,3653275853u,81,-117,10,958058058u,(void*)8835148381236382049lu)
   expected: "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000D9C090CD%                                                                                                                                         000000000000000000000000000000000000000000000000000000958058058                                                      0x7a9cc0a461764961                                                            \n"
   actual:   "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000D9C090CD37                                                                                                                                        000000000000000000000000000000000000000000000000000000958058058                                                      0x7a9cc0a461764961                                                            \n"

- [OUTPUT] ft_printf("%-69.27%%--*p" ,-94,(void*)7045295314441527752lu)
   expected: "%                                                                    0x61c5eac2cb02e1c8                                                                            "
   actual:   "000000000000000000000000037                                          0x61c5eac2cb02e1c8                                                                            "

- [OUTPUT] ft_printf("%--110.93x%--78.123s%--30.92X%-45.57%%-*.68s" ,218095759u,"lCyN\r",1729010453u,134,"OxhROR`$;.U*;0zEm>e\r")
   expected: "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000cffe08f                 lCyN                                                                         000000000000000000000000000000000000000000000000000000000000000000000000000000000000670E9B15%                                            OxhROR`$;.U*;0zEm>e                                                                                                                  \r\r"
   actual:   "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000cffe08f                 lCyN                                                                         000000000000000000000000000000000000000000000000000000000000000000000000000000000000670E9B15000000000000000000000000000000000000000000000000000000037OxhROR`$;.U*;0zEm>e                                                                                                                  \r\r"

- [OUTPUT] ft_printf("%000169.50u%-127.85%%--195p%-51.49s%-160p" ,2209242471u,(void*)8769599610347160825lu,"1+6UGQiBr8wAmIE*{,xBrju#}s=X",(void*)15118044339110535138lu)
   expected: "                                                                                                                       00000000000000000000000000000000000000002209242471%                                                                                                                              0x79b3e061dd2584f9                                                                                                                                                                                 1+6UGQiBr8wAmIE*{,xBrju#}s=X                       0xd1ce153a4349dfe2                                                                                                                                              "
   actual:   "                                                                                                                       000000000000000000000000000000000000000022092424710000000000000000000000000000000000000000000000000000000000000000000000000000000000037                                          0x79b3e061dd2584f9                                                                                                                                                                                 1+6UGQiBr8wAmIE*{,xBrju#}s=X                       -0x2e31eac5bcb6201e                                                                                                                                             "

- [OUTPUT] ft_printf("%-82.43i%-*.82%%-*.20X" ,-1945174241,-26,94,1446072230u)
   expected: "-0000000000000000000000000000000001945174241                                      %                         00000000000056314FA6                                                                          "
   actual:   "-0000000000000000000000000000000001945174241                                      000000000000000000000000000000000000000000000000000000000000000000000000000000003700000000000056314FA6                                                                          "

- [OUTPUT] ft_printf("%-110.159i%c%0100.177x%-188.*%" ,646185978,14,3198690061u,123)
   expected: "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006461859780000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000bea8230d%                                                                                                                                                                                           \0e"
   actual:   "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006461859780000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000bea8230d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000037                                                                 \0e"

- [OUTPUT] ft_printf("%--81.*%%019.14%%---27c%-75.150d%00136.74x" ,70,-15,-128722927,4090510000u)
   expected: "%                                                                                000000000000000000%                          -000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000128722927                                                              000000000000000000000000000000000000000000000000000000000000000000f3d03ab0\f1"
   actual:   "0000000000000000000000000000000000000000000000000000000000000000000037                00000000000037                          -000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000128722927                                                              000000000000000000000000000000000000000000000000000000000000000000f3d03ab0\f1"

- [OUTPUT] ft_printf("%52c%00040.166%%-131c%-12.99s" ,-57,123,"k\r/ULCoKi0")
   expected: "                                                   000000000000000000000000000000000000000%{                                                                                                                                  k/ULCoKi0  \c7\r"
   actual:   "                                                   0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000037{                                                                                                                                  k/ULCoKi0  \c7\r"

- [OUTPUT] ft_printf("%57c%-76.*s%--38p%-*.159X%000193.93X" ,55,-20,"@(ECnQ^2yp,6x4F\fwA*iLS\fgt,De",(void*)15808961691193129302lu,168,1914174653u,2368364743u)
   expected: "                                                        7@(ECnQ^2yp,6x4FwA*iLSgt,De                                                0xdb64b6e60f533956                    00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007217FCBD                                                                                                             00000000000000000000000000000000000000000000000000000000000000000000000000000000000008D2A60C7\0c\0c"
   actual:   "                                                        7@(ECnQ^2yp,6x4FwA*iLSgt,De                                                -0x249b4919f0acc6aa                   00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007217FCBD                                                                                                             00000000000000000000000000000000000000000000000000000000000000000000000000000000000008D2A60C7\0c\0c"

- [OUTPUT] ft_printf("%--140.*d%-169.198X%-*.93%" ,-176,2043379162,1756246551u,32)
   expected: "2043379162                                                                                                                                  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000068AE3217%                               "
   actual:   "2043379162                                                                                                                                  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000068AE3217000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000037"

- [OUTPUT] ft_printf("%-70.21i%-*.115s%--57.196%%83.157s" ,502357737,80,"D5*;&'q|R:2T>","S}Vl41s`R:E_p>$R.\f9N")
   expected: "000000000000502357737                                                 D5*;&'q|R:2T>                                                                   %                                                                                                                       S}Vl41s`R:E_p>$R.9N\0c"
   actual:   "000000000000502357737                                                 D5*;&'q|R:2T>                                                                   0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000037                                                               S}Vl41s`R:E_p>$R.9N\0c"

- [OUTPUT] ft_printf("%-175.96%%-153.x" ,822360617u)
   expected: "%                                                                                                                                                                              31043a29                                                                                                                                                 "
   actual:   "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000037                                                                               31043a29                                                                                                                                                 "

- [OUTPUT] ft_printf("%043.165%%--35.34s%--4.*d%-189.*i" ,"TSvqw0m:$c!hhK(,R*",-100,967600936,45,1272776825)
   expected: "000000000000000000000000000000000000000000%TSvqw0m:$c!hhK(,R*                 967600936000000000000000000000000000000000001272776825                                                                                                                                                "
   actual:   "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000037TSvqw0m:$c!hhK(,R*                 967600936000000000000000000000000000000000001272776825                                                                                                                                                "

- [OUTPUT] ft_printf("%-166.180X%--18.47d%---111.87%%8p%0114.24X" ,1637127682u,-1931431309,(void*)3522468094256045905lu,4291674618u)
   expected: "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000061949602-00000000000000000000000000000000000001931431309%                                                                                                              0x30e25211a2c75f51                                                                                          0000000000000000FFCDC1FA"
   actual:   "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000061949602-00000000000000000000000000000000000001931431309000000000000000000000000000000000000000000000000000000000000000000000000000000000000037                        0x30e25211a2c75f51                                                                                          0000000000000000FFCDC1FA"

- [OUTPUT] ft_printf("%-55.46%%--171.99s%--56.41X%-173X" ,"7",3917830995u,3557113666u)
   expected: "%                                                      7                                                                                                                                                                          000000000000000000000000000000000E9855B53               D4053F42                                                                                                                                                                     "
   actual:   "0000000000000000000000000000000000000000000037         7                                                                                                                                                                          000000000000000000000000000000000E9855B53               D4053F42                                                                                                                                                                     "

- [OUTPUT] ft_printf("%--85.97%%---129c" ,33)
   expected: "%                                                                                    !                                                                                                                                "
   actual:   "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000037!                                                                                                                                "

- [OUTPUT] ft_printf("%29p%0151.162x%---53.46u%-139.26X" ,(void*)17894711340605174765lu,1565093748u,662758369u,3536629372u)
   expected: "           0xf856c9276eecf3ed00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005d496f740000000000000000000000000000000000000662758369       000000000000000000D2CCAE7C                                                                                                                 "
   actual:   "           -0x7a936d891130c1300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005d496f740000000000000000000000000000000000000662758369       000000000000000000D2CCAE7C                                                                                                                 "

- [OUTPUT] ft_printf("%--74.144x%-166p%--78.55s%-195.140x" ,625771587u,(void*)14083163232330204447lu,"P(LiM1QG='.bUp\r",314220770u)
   expected: "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000254c84430xc371725810e2451f                                                                                                                                                    P(LiM1QG='.bUp                                                               00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012baa0e2                                                       \r"
   actual:   "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000254c8443-0x3c8e8da7ef1dbae1                                                                                                                                                   P(LiM1QG='.bUp                                                               00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012baa0e2                                                       \r"

- [OUTPUT] ft_printf("%-*.156x%0033.100u%0.104i%-4.150x%-90.%" ,28,4190048377u,3783020883u,-1750158056,3765069756u)
   expected: "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f9bf10790000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003783020883-000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000017501580560000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e06a67bc%                                                                                         "
   actual:   "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f9bf10790000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003783020883-000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000017501580560000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e06a67bc37                                                                                        "

- [OUTPUT] ft_printf("%--150.*d%01.172i%--151.122d%--*.110x%--23.182%" ,193,-1523409169,453642614,881460015,68,2920216226u)
   expectedae0ef6a2%                      "
   actualae0ef6a200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000037"

- [OUTPUT] ft_printf("%-66p%-90c%--*.69x%0045.*u" ,(void*)9420165689360028937lu,-29,-122,174318236u,-127,2553740548u)
   expected: "0x82bb26c8c7a09509                                                                                                                                         00000000000000000000000000000000000000000000000000000000000000a63e29c                                                     000000000000000000000000000000000002553740548\e3"
   actual:   "-0x7d44d937385f6af7                                                                                                                                        00000000000000000000000000000000000000000000000000000000000000a63e29c                                                     000000000000000000000000000000000002553740548\e3"

- [OUTPUT] ft_printf("%108p%-175.188i" ,(void*)11721873312409420167lu,-653373315)
   expected: "                                                                                          0xa2ac75ac284b8187-00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000653373315"
   actual:   "                                                                                         -0x5d538a53d7b47e79-00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000653373315"

- [OUTPUT] ft_printf("%00142.67d%-87.120s%-21.160%%-*.98d%-105.71d" ,1277409698,"/]>n?I^K$-",-187,-569482950,1801496736)
   expected: "                                                                           0000000000000000000000000000000000000000000000000000000001277409698/]>n?I^K$-                                                                             %                    -00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000569482950                                                                                        00000000000000000000000000000000000000000000000000000000000001801496736                                  "
   actual:   "                                                                           0000000000000000000000000000000000000000000000000000000001277409698/]>n?I^K$-                                                                             0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000037-00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000569482950                                                                                        00000000000000000000000000000000000000000000000000000000000001801496736                                  "

- [OUTPUT] ft_printf("%-58.131%")
   expected: "%                                                         "
   actual:   "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000037"

-e ######### Test-42 ##########
